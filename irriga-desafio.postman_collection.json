{
	"info": {
		"_postman_id": "530a3493-c9a3-4081-a093-1156597c086f",
		"name": "irriga-desafio",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26002382"
	},
	"item": [
		{
			"name": "irrigations",
			"item": [
				{
					"name": "irrigations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(item => {\r",
									"        pm.expect(item).to.have.all.keys('id', 'pivotId', 'applicationAmount', 'irrigationDate', 'userId');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ApplicationAmount is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(item => {\r",
									"        pm.expect(item.applicationAmount).to.be.a('number').that.is.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Pivot ID</th>\r",
									"        <th>Application Amount</th>\r",
									"        <th>Irrigation Date</th>\r",
									"        <th>User ID</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{pivotId}}</td>\r",
									"            <td>{{applicationAmount}}</td>\r",
									"            <td>{{irrigationDate}}</td>\r",
									"            <td>{{userId}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return { response: pm.response.json() };\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/irrigations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"irrigations"
							]
						}
					},
					"response": []
				},
				{
					"name": "irrigations/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test('Response time is less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test('Content-Type is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"// Test for presence of required fields\r",
									"const requiredFields = ['id', 'pivotId', 'applicationAmount', 'irrigationDate', 'userId'];\r",
									"requiredFields.forEach(field => {\r",
									"    pm.test(`Response contains ${field}`, () => {\r",
									"        pm.expect(response).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test for field types\r",
									"pm.test('applicationAmount is a number', () => {\r",
									"    pm.expect(response.applicationAmount).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test('irrigationDate is a string', () => {\r",
									"    pm.expect(response.irrigationDate).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/irrigations/{{irrigationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"irrigations",
								"{{irrigationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "irrigations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for Content-Type header\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"// Test for message in response\r",
									"pm.test(\"Response message is correct\", () => {\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.equal(\"Irrigation record created successfully!\");\r",
									"});\r",
									"\r",
									"// Test for irrigation object properties\r",
									"pm.test(\"Irrigation object has required properties\", () => {\r",
									"    const irrigation = response.irrigation;\r",
									"    pm.expect(irrigation).to.have.property('id');\r",
									"    pm.expect(irrigation).to.have.property('pivotId');\r",
									"    pm.expect(irrigation).to.have.property('applicationAmount');\r",
									"    pm.expect(irrigation).to.have.property('irrigationDate');\r",
									"    pm.expect(irrigation).to.have.property('userId');\r",
									"});\r",
									"\r",
									"// POST /irrigations - Tests tab\r",
									"// Verifica se a requisição foi bem-sucedida\r",
									"if (pm.response.code == 201) {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // Assumindo que a resposta de criação da irrigação retorna o objeto da irrigação com um 'id'\r",
									"    if (responseJson.irrigation.id) {\r",
									"        pm.environment.set(\"irrigationId\", responseJson.irrigation.id);\r",
									"        console.log(\"Irrigation ID capturado e armazenado:\", responseJson.irrigation.id);\r",
									"    } else {\r",
									"        console.warn(\"Resposta de criação de irrigação não contém 'id'.\");\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Criação de irrigação falhou com status:\", pm.response.code, pm.response.status);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pivotId\": \"{{pivotId}}\",\r\n    \"applicationAmount\": 50.5,\r\n    \"irrigationDate\": \"2025-07-15T10:30:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/irrigations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"irrigations"
							]
						}
					},
					"response": []
				},
				{
					"name": "irrigations/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for presence of response headers\r",
									"pm.test(\"Response has 'X-Powered-By' header\", function () {\r",
									"    pm.response.to.have.header(\"X-Powered-By\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/irrigations/{{irrigationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"irrigations",
								"{{irrigationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "pivots",
			"item": [
				{
					"name": "pivots",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test('Response time is less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for content-type header\r",
									"pm.test('Content-Type is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"// Test for presence of message in response\r",
									"pm.test('Response contains message', () => {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.equal('Pivot created successfully!');\r",
									"});\r",
									"\r",
									"// Test for presence of pivot object in response\r",
									"pm.test('Response contains pivot object', () => {\r",
									"    pm.expect(response).to.have.property('pivot');\r",
									"});\r",
									"\r",
									"// Validate properties of pivot object\r",
									"const pivot = response.pivot;\r",
									"pm.test('Pivot object has correct properties', () => {\r",
									"    pm.expect(pivot).to.have.all.keys('id', 'description', 'flowRate', 'minApplicationDepth', 'userId');\r",
									"});\r",
									"\r",
									"// Test for data types of pivot properties\r",
									"pm.test('Pivot properties have correct data types', () => {\r",
									"    pm.expect(pivot.id).to.be.a('string');\r",
									"    pm.expect(pivot.description).to.be.a('string');\r",
									"    pm.expect(pivot.flowRate).to.be.a('number');\r",
									"    pm.expect(pivot.minApplicationDepth).to.be.a('number');\r",
									"    pm.expect(pivot.userId).to.be.a('string');\r",
									"});\r",
									"\r",
									"// POST /pivots - Tests tab\r",
									"// Verifica se a requisição foi bem-sucedida\r",
									"if (pm.response.code == 201) {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // Assumindo que a resposta de criação do pivô retorna o objeto do pivô com um 'id'\r",
									"    if (responseJson.pivot.id && responseJson.message == \"Pivot created successfully!\") {\r",
									"        pm.environment.set(\"pivotId\", responseJson.pivot.id);\r",
									"        console.log(\"Pivot ID capturado e armazenado:\", responseJson.id);\r",
									"    } else {\r",
									"        console.warn(\"Resposta de criação de pivô não contém 'id'.\");\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Criação de pivô falhou com status:\", pm.response.code, pm.response.status);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Pivô Central Fazenda Teste POST 2\",\r\n    \"flowRate\": 150.5,\r\n    \"minApplicationDepth\": 5.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pivots",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pivots"
							]
						}
					},
					"response": []
				},
				{
					"name": "pivots/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is correct\", () => {\r",
									"    pm.expect(response.message).to.equal(\"Pivot updated successfully!\");\r",
									"});\r",
									"\r",
									"// Test for pivot object structure\r",
									"pm.test(\"Pivot object has correct properties\", () => {\r",
									"    pm.expect(response.pivot).to.have.all.keys('id', 'description', 'flowRate', 'minApplicationDepth', 'userId');\r",
									"});\r",
									"\r",
									"// Test for pivot description\r",
									"pm.test(\"Pivot description is a string\", () => {\r",
									"    pm.expect(response.pivot.description).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Test for flowRate\r",
									"pm.test(\"Flow rate is a number\", () => {\r",
									"    pm.expect(response.pivot.flowRate).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Test for minApplicationDepth\r",
									"pm.test(\"Min application depth is a number\", () => {\r",
									"    pm.expect(response.pivot.minApplicationDepth).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Test for userId\r",
									"pm.test(\"User ID is a string\", () => {\r",
									"    pm.expect(response.pivot.userId).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Pivô Central Fazenda Teste PUT\",\r\n    \"flowRate\": 150.5,\r\n    \"minApplicationDepth\": 5.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pivots/{{pivotId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pivots",
								"{{pivotId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "pivots/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for presence of headers\r",
									"pm.test(\"Response has 'X-Powered-By' header\", function () {\r",
									"    pm.response.to.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"// Test for 'Connection' header\r",
									"pm.test(\"Response has 'Connection' header\", function () {\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"});\r",
									"\r",
									"// Test for 'Keep-Alive' header\r",
									"pm.test(\"Response has 'Keep-Alive' header\", function () {\r",
									"    pm.response.to.have.header(\"Keep-Alive\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pivots/{{pivotId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pivots",
								"{{pivotId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "pivots/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has Content-Type of application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('description').that.is.a('string');\r",
									"    pm.expect(responseData).to.have.property('flowRate').that.is.a('number');\r",
									"    pm.expect(responseData).to.have.property('minApplicationDepth').that.is.a('number');\r",
									"    pm.expect(responseData).to.have.property('userId').that.is.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pivots/{{pivotId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pivots",
								"{{pivotId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "pivots",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Check if the response is an array\r",
									"pm.expect(response).to.be.an('array');\r",
									"\r",
									"// Loop through each pivot object in the response\r",
									"response.forEach(pivot => {\r",
									"    // Validate pivot properties\r",
									"    pm.expect(pivot).to.have.all.keys('id', 'description', 'flowRate', 'minApplicationDepth', 'userId');\r",
									"    pm.expect(pivot.id).to.be.a('string');\r",
									"    pm.expect(pivot.description).to.be.a('string');\r",
									"    pm.expect(pivot.flowRate).to.be.a('number');\r",
									"    pm.expect(pivot.minApplicationDepth).to.be.a('number');\r",
									"    pm.expect(pivot.userId).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Validate response headers\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response matches the expected schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item).to.have.all.keys('id', 'description', 'flowRate', 'minApplicationDepth', 'userId');\r",
									"        \r",
									"        pm.expect(item.id).to.be.a('string');\r",
									"        pm.expect(item.description).to.be.a('string');\r",
									"        pm.expect(item.flowRate).to.be.a('number');\r",
									"        pm.expect(item.minApplicationDepth).to.be.a('number');\r",
									"        pm.expect(item.userId).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each pivot's flowRate is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(pivot) {\r",
									"        pm.expect(pivot.flowRate).to.be.a('number').and.to.be.at.least(0, \"Flow rate should be a non-negative number\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each pivot's minApplicationDepth is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    responseData.forEach(function(pivot) {\r",
									"        pm.expect(pivot.minApplicationDepth).to.be.a('number').that.is.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pivots",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pivots"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test('Response time is less than 200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test('Response body has required fields', () => {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response).to.have.property('user');\r",
									"    pm.expect(response.user).to.have.property('id');\r",
									"    pm.expect(response.user).to.have.property('username');\r",
									"});\r",
									"\r",
									"// Test for message content\r",
									"pm.test('Message confirms successful registration', () => {\r",
									"    pm.expect(response.message).to.equal('User registered successfully!');\r",
									"});\r",
									"\r",
									"// Test for user ID format\r",
									"pm.test('User ID is a valid UUID', () => {\r",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r",
									"    pm.expect(response.user.id).to.match(uuidRegex);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"oiee\",\r\n    \"password\":\"1234joao\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test for response body properties\r",
									"pm.test(\"Response body contains message and token\", () => {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response).to.have.property('token');\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    // Convert the JSON response to a JavaScript object\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    // Check if the response contains a 'token' and 'message'\r",
									"    if (responseJson.token && responseJson.message == \"Login successful!\") {\r",
									"        // Set the 'jwtToken' environment variable\r",
									"        pm.environment.set(\"jwtToken\", responseJson.token);\r",
									"        // Optional: Store user data if necessary\r",
									"        if (responseJson.user && responseJson.user.username) {\r",
									"            pm.environment.set(\"loggedInUser\", JSON.stringify(responseJson.user));\r",
									"            console.log(\"Token JWT captured and stored:\", responseJson.token);\r",
									"            console.log(\"Logged in user stored:\", responseJson.user.username);\r",
									"        } else {\r",
									"            console.warn(\"Response does not contain 'user' or 'username'.\");\r",
									"        }\r",
									"    } else {\r",
									"        console.warn(\"Login response does not contain 'token' or 'message'.\");\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Login failed with status:\", pm.response.code, pm.response.status);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"oiee\",\r\n    \"password\":\"1234joao\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwtToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}